一、微服务简介

微服务是一种架构风格，一个大型复杂软件应用由一个或多个微服务组成。系统中的各个微服务可被独立部署，各个微服务之间是松耦合的。每个微服务仅关注于完成一件任务并很好地完成该任务。在所有情况下，每个任务代表着一个小的业务能力。

二、单体架构的优缺点

为什么选用微服务架构，首先要从单体架构说起，什么是单体架构呢？顾名思义，整个应用被当作一个整体进行部署。所有的业务都被集成到同一个war包中，共用所有的数据库和缓存资源。在业务发展初期，人员较少，采用单体框架具有较大优势。其优势如下：
- 架构简单，技术统一，便于研发人员理解和开发；
- 易于部署，只需要将单一的war包部署在生产环境中即可
随着业务的发展以及研发人员规模的扩大，单体框架的问题越来越大，其主要优势如下：：
- JAR包之间依赖关系复杂，依赖引用问题严重，一个简单的JAR包升级或者改动都会影响全局，协同开发困难；
- 业务边界不清楚，问题难于排查；
- 资源竞争严重，公共资源连接池无有效隔离，问题容易被传导；
- 工程体量巨大，编译和部署时间长，不利于持续开发。

三、微服务架构的优缺点

为了解决单体架构带来的问题，需要对应用架构进行重新梳理，将单体的系统拆分为多个系统，系统间划定边界单独部署。各个系统的功能，代码结构，部署运维将拥有更高的自主权，在系统的设计上有了更大的自由度。拆分的方式有两种，一种是水平拆分，按照业务的功能处理逻辑进行拆分，这是面向业务划分成不同的业务系统。微服务架构具有如下的优点：
- 业务隔离，业务开发互不影响，有利于产品的快速迭代；
- 去中心化，各应用独立部署，线程、连接池等资源独享；
- 代码零侵入，功能组件化，对使用方完全透明；
- 集群部署，自动化扩容，容错能力强；
- 统一流量控制，安全性高。

四、微服务的技术栈

（1）配置管理（Config Server）：用于对微服务的配置信息进行统一配置、更新。如Disconf、Apollo、SpringCloud Config等。
（2）服务注册中心（Service Registry）：用于服务注册和发现，例如SpringCloud Netflix提供的Eureka、Dubbo等。
（3）服务网关（Service Gateway）：是所有外部系统连接内部系统的桥梁，是微服务架构的重要组成部分。所有接口在服务网关进行路由配置，才可以让外部系统（包括外部浏览器、移动设备等）访问。代表为Spring Cloud Netflix Zuul。
（4）负载均衡器（LBS）：通过指定的策略选择微服务地址，并对请求进行转发，如SpringCloud Netflix的Ribbon等。
（5）熔断器（Cricuit Breaker）：用于在服务出现异常情况如失败率升高、访问量暴增、或者不可用时对服务进行自动打开开关进行熔断，并在服务恢复时自动恢复。代表为SpringCloud Netflix的Hystrix。
（6）监控系统（Monitor）：用于对微服务的实时数据进行采集和分析，生成监控报表，并通过邮件、短信、微信等多种方式通知到相关负责人。

五、API Gateway

API Gateway即API网关，所有的请求首先会经过这个网关，然后到达服务端，API网关作为系统接口对外的统一出口，可以减少调用方对服务实现的感知。那么引入API Gateway是否有必要？如果不引入就会出现很多问题：如
（1）权限校验、访问控制不统一，安全保障比较困难；
（2）提供方式多样，接口不规范，给接入造成很多不方便；
（3）业务处理方式复杂，同样的业务实现在不同的接入中会实现多次，导致代码维护困难，且容易出错。
为了解决接入不统一带来的问题，引入API Gateway，将接入逻辑和业务逻辑分开，API Gateway只实现接入逻辑，具体的业务逻辑由各业务方来实现，实现对原有功能的解耦，并且在网关层增加权限控制、流量控制、日志记录、访问统计、熔断等通用功能，提升管理统计监控的功能，提升服务质量。



//我现在在当前文件下编写代码
//鉴权信息  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















